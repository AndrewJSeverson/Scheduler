@{
    ViewBag.Title = "Index";
    var cellWidth = 10;
}
@model Scheduler.Models.HomeModel 


<div class="center">
    <b><span>Number of processes: </span></b><input type="text" id="NumProcesses" size="3"/>
    <button id="NumProcessSubmit">Submit</button>
</div>
<hr/>
<br/>

<div class="center">
    <span>Number of Processes: </span><b>@Model.NumProcess</b>
    <table id="CPUTimeTable">
            <thead>
                <th>Process</th>
                <th>Arrival Time</th>
                @for (var i = 0; i < Model.ProcessItems[0].BurstArray.Count(); i ++ )
                {
                    <th>@(i%2 == 0 ? "CPU" : "I/O") @((i/2)+1)</th>
                }
            </thead>
            <tbody>
                @for (var i = 0; i < Model.ProcessItems.Count; i ++ )
                {
                    <tr>
                        <td>P @(i+1)</td>
                        <td>@Model.ProcessItems[i].ArrivalTime</td>
                        @for (var j = 0; j < Model.ProcessItems[i].BurstArray.Count(); j++){
                            <td>@Model.ProcessItems[i].BurstArray[j]</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
</div>



<!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
                                    FEEDBACK 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
-->
    <h1 id="FeedbackOpenClose">Feedback Algorithm</h1>
<hr/>
    <div id="FeedbackContainer">
        <h3>CPU</h3>  
        <div class="GanttContainer">
            @for (var i = 0; i < Model.Feedback.CpuProcesses.Count; i++)
            {
                if (i == 0)
                {
                    if (Model.Feedback.CpuProcesses[i].StartTime != 0)
                    {
                        <span style="width:@(Model.Feedback.CpuProcesses[i].StartTime*cellWidth)px;" class="Break">@Model.Feedback.CpuProcesses[i].StartTime</span>
                    }
                    <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
                else if (Model.Feedback.CpuProcesses[i].StartTime > (Model.Feedback.CpuProcesses[i - 1].StartTime + Model.Feedback.CpuProcesses[i-1].Duration))
                {
                    <span style="width:@(((Model.Feedback.CpuProcesses[i].StartTime)-(Model.Feedback.CpuProcesses[i-1].StartTime + Model.Feedback.CpuProcesses[i].Duration))*cellWidth)px;" class="Break">@((Model.Feedback.CpuProcesses[i].StartTime)-(Model.Feedback.CpuProcesses[i-1].StartTime + Model.Feedback.CpuProcesses[i].Duration))</span>
                }
                else
                {
                    <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
            }
        </div>
        <h3>I/O</h3>
        <div class="GanttContainer">
            @for (var i = 0; i < Model.Feedback.IoProcesses.Count; i++)
            {
                if (i == 0)
                {
                    if (Model.Feedback.IoProcesses[i].StartTime != 0)
                    {
                        <span style="width:@(Model.Feedback.IoProcesses[i].StartTime*cellWidth)px;" class="Break">@Model.Feedback.IoProcesses[i].StartTime</span>
                    }
                    <span style="width: @(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                }
                else if (Model.Feedback.IoProcesses[i].StartTime > (Model.Feedback.IoProcesses[i - 1].StartTime + Model.Feedback.IoProcesses[i-1].Duration))
                {
                    <span style="width:@(((Model.Feedback.IoProcesses[i].StartTime)-(Model.Feedback.IoProcesses[i-1].StartTime + Model.Feedback.IoProcesses[i].Duration))*cellWidth)px;" class="Break">@((Model.Feedback.IoProcesses[i].StartTime)-(Model.Feedback.IoProcesses[i-1].StartTime + Model.Feedback.IoProcesses[i].Duration))</span>
                }
                else
                {
                    <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                }
            }
        </div>
        <h3>Stats</h3>
        <table>
            <thead>
                <th>Stat</th>
                @for (var i = 0; i < Model.ProcessItems.Count; i ++ )
                {
                    <th>@(i+1)</th>
                }
            </thead>
            <tbody>
                
            </tbody>
        </table>
    </div>


<!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
                                    FCFS 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
-->

<h1 id="FCFSOpenClose">First Come First Serve (FCFS) Algorithm</h1>
<hr/>
    <div id="FCFSContainer" class="hidden">
            <h3>CPU</h3>  
            <div class="GanttContainer">
                @for (var i = 0; i < Model.Feedback.CpuProcesses.Count; i++)
                {
                    if (i == 0)
                    {
                        <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                    }
                    else if (Model.Feedback.CpuProcesses[i].StartTime > (Model.Feedback.CpuProcesses[i - 1].StartTime + Model.Feedback.CpuProcesses[i].Duration))
                    {
                        <span style="width:@(((Model.Feedback.CpuProcesses[i].StartTime)-(Model.Feedback.CpuProcesses[i-1].StartTime + Model.Feedback.CpuProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.CpuProcesses[i].Duration</span>
                    }
                    else
                    {
                        <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                    }
                }
            </div>
            <h3>I/O</h3>
            <div class="GanttContainer">
                @for (var i = 0; i < Model.Feedback.IoProcesses.Count; i++)
                {
                    if (i == 0)
                    {
                        <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                    }
                    else if (Model.Feedback.IoProcesses[i].StartTime > (Model.Feedback.IoProcesses[i - 1].StartTime + Model.Feedback.IoProcesses[i].Duration))
                    {
                        <span style="width:@(((Model.Feedback.IoProcesses[i].StartTime)-(Model.Feedback.IoProcesses[i-1].StartTime + Model.Feedback.IoProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.IoProcesses[i].Duration</span>
                    }
                    else
                    {
                        <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                    }
                }
            </div>
    </div>


<!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
                                    Shortest Process Next 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
-->

<h1 id="SPNOpenClose">Shortes Process Next (non-preemptive) Algorithm</h1>
<hr/>

<div id="SPNContainer" class="hidden">
    <h3>CPU</h3>  
    <div class="GanttContainer">
        @for (var i = 0; i < Model.Feedback.CpuProcesses.Count; i++)
        {
            if (i == 0)
            {
                <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
            }
            else if (Model.Feedback.CpuProcesses[i].StartTime > (Model.Feedback.CpuProcesses[i - 1].StartTime + Model.Feedback.CpuProcesses[i].Duration))
            {
                <span style="width:@(((Model.Feedback.CpuProcesses[i].StartTime)-(Model.Feedback.CpuProcesses[i-1].StartTime + Model.Feedback.CpuProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.CpuProcesses[i].Duration</span>
            }
            else
            {
                <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
            }
        }
    </div>
    <h3>I/O</h3>
    <div class="GanttContainer">
        @for (var i = 0; i < Model.Feedback.IoProcesses.Count; i++)
        {
            if (i == 0)
            {
                <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
            }
            else if (Model.Feedback.IoProcesses[i].StartTime > (Model.Feedback.IoProcesses[i - 1].StartTime + Model.Feedback.IoProcesses[i].Duration))
            {
                <span style="width:@(((Model.Feedback.IoProcesses[i].StartTime)-(Model.Feedback.IoProcesses[i-1].StartTime + Model.Feedback.IoProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.IoProcesses[i].Duration</span>
            }
            else
            {
                <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
            }
        }
    </div>
</div>


<!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
                                    Shortes Time Remaining 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
-->

<h1 id="STROpenClose">Shortest Time Remaining (preemptive) Algorithm</h1>
<hr/>
<div id="STRContainer" class="hidden">
        <h3>CPU</h3>  
        <div class="GanttContainer">
            @for (var i = 0; i < Model.Feedback.CpuProcesses.Count; i++)
            {
                if (i == 0)
                {
                    <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
                else if (Model.Feedback.CpuProcesses[i].StartTime > (Model.Feedback.CpuProcesses[i - 1].StartTime + Model.Feedback.CpuProcesses[i].Duration))
                {
                    <span style="width:@(((Model.Feedback.CpuProcesses[i].StartTime)-(Model.Feedback.CpuProcesses[i-1].StartTime + Model.Feedback.CpuProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
                else
                {
                    <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
            }
        </div>
        <h3>I/O</h3>
        <div class="GanttContainer">
            @for (var i = 0; i < Model.Feedback.IoProcesses.Count; i++)
            {
                if (i == 0)
                {
                    <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                }
                else if (Model.Feedback.IoProcesses[i].StartTime > (Model.Feedback.IoProcesses[i - 1].StartTime + Model.Feedback.IoProcesses[i].Duration))
                {
                    <span style="width:@(((Model.Feedback.IoProcesses[i].StartTime)-(Model.Feedback.IoProcesses[i-1].StartTime + Model.Feedback.IoProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.IoProcesses[i].Duration</span>
                }
                else
                {
                    <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                }
            }
        </div>
</div>


<!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
                                    Round Robin 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
-->

<h1 id="RROpenClose">Round Robin Algorithm</h1>
<hr/>
<div id="RRContainer" class="hidden">
        <h3>CPU</h3>  
        <div class="GanttContainer">
            @for (var i = 0; i < Model.Feedback.CpuProcesses.Count; i++)
            {
                if (i == 0)
                {
                    <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
                else if (Model.Feedback.CpuProcesses[i].StartTime > (Model.Feedback.CpuProcesses[i - 1].StartTime + Model.Feedback.CpuProcesses[i].Duration))
                {
                    <span style="width:@(((Model.Feedback.CpuProcesses[i].StartTime)-(Model.Feedback.CpuProcesses[i-1].StartTime + Model.Feedback.CpuProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
                else
                {
                    <span style="width:@(Model.Feedback.CpuProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.CpuProcesses[i].Name">@Model.Feedback.CpuProcesses[i].Duration</span>
                }
            }
        </div>
        <h3>I/O</h3>
        <div class="GanttContainer">
            @for (var i = 0; i < Model.Feedback.IoProcesses.Count; i++)
            {
                if (i == 0)
                {
                    <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                }
                else if (Model.Feedback.IoProcesses[i].StartTime > (Model.Feedback.IoProcesses[i - 1].StartTime + Model.Feedback.IoProcesses[i].Duration))
                {
                    <span style="width:@(((Model.Feedback.IoProcesses[i].StartTime)-(Model.Feedback.IoProcesses[i-1].StartTime + Model.Feedback.IoProcesses[i].Duration))*cellWidth)px;" class="Break">@Model.Feedback.IoProcesses[i].Duration</span>
                }
                else
                {
                    <span style="width:@(Model.Feedback.IoProcesses[i].Duration*cellWidth)px;" class="@Model.Feedback.IoProcesses[i].Name">@Model.Feedback.IoProcesses[i].Duration</span>
                }
            }
        </div>
</div>

